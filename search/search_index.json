{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes A collection of helpful notes, simple solutions, hacks and things that I stumbled upon Set up MkDocs mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Deploy to GitHub Pages Automatically deploy build files to gh-pages branch: bash deploy.sh License MIT","title":"Introduction"},{"location":"#notes","text":"A collection of helpful notes, simple solutions, hacks and things that I stumbled upon","title":"Notes"},{"location":"#set-up-mkdocs","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Set up MkDocs"},{"location":"#deploy-to-github-pages","text":"Automatically deploy build files to gh-pages branch: bash deploy.sh","title":"Deploy to GitHub Pages"},{"location":"#license","text":"MIT","title":"License"},{"location":"abbreviations/","text":"Abbreviations CLI Reverse search: CTRL + R search in man : / Mozilla Page info + media: CMD + I PhpStorm Get var value: Select var - CMD + Y MAC Sound control: ALT + Volume Up/Down Key","title":"Abbreviations"},{"location":"abbreviations/#abbreviations","text":"","title":"Abbreviations"},{"location":"abbreviations/#cli","text":"Reverse search: CTRL + R search in man : /","title":"CLI"},{"location":"abbreviations/#mozilla","text":"Page info + media: CMD + I","title":"Mozilla"},{"location":"abbreviations/#phpstorm","text":"Get var value: Select var - CMD + Y","title":"PhpStorm"},{"location":"abbreviations/#mac","text":"Sound control: ALT + Volume Up/Down Key","title":"MAC"},{"location":"tests/","text":"Tests Unit Tests: Testing of individual functions or classes by supplying input and making sure the output is as expected. Integration Tests Testing processes or components to behave as expected when combined, including the side effects. Test the correct inter-operation of multiple subsystems. There is whole spectrum there, from testing integration between two modules, to testing integration with the production environment. UI Tests (A.K.A Functional Tests) Testing scenarios on the product itself via browser, without taking into consideration the internal processes, to ensure expected behavior. Smoke Test (similar to Sanity Check) A simple integration test that checks that the system's critical functionality of the program is working fine. It's (also) used to save QA from wasting time on installing and testing software that is unstable. Smoke testing is an analogy with plumbing, where pipes are filled by smoke and then checked visually. If anything smokes, the system is leaky. Regression Test (aka Non-Regression Test) A test that was written particularly for a bug fix and ensures that this bug will not happen again. It can also be a test made prior to changing an application to ensure the application has the same output. Acceptance Test Ensures that a new feature is implemented correctly. Similar to an integration test, but focuses on the expected result rather than on the integration level of the components involved. System Test Tests a system in a black boxed environment. Dependencies on other systems are often mocked (otherwise it would be more of an integration test). It differs from Integration Test in the matter of it is testing on a complete, integrated system to evaluate the system\u2019s compliance with its specified requirements whether Integration testing is a testing in which individual software modules are combined and tested as a group. Pre-flight Check Tests that are repeated in a production-like environment, to alleviate the 'works on my machine' issue. Often this is realized by doing an acceptance or smoke test in a production like environment. End-to-end Test This is more about the actual flow through a system in a more realistic end user scenario. Can a user navigate the application as expected and does it work? You're testing the workflow (where System tests test the whole system) A/B Test (aka Split Testing) Randomly redirect a percentage of clients to another version of the application, gather data and generate statistics Process A development process example could be: Build passed? - Smoke Test passed? - Acceptance Test passed? - QA Tested? - Production","title":"Tests"},{"location":"tests/#tests","text":"","title":"Tests"},{"location":"tests/#unit-tests","text":"Testing of individual functions or classes by supplying input and making sure the output is as expected.","title":"Unit Tests:"},{"location":"tests/#integration-tests","text":"Testing processes or components to behave as expected when combined, including the side effects. Test the correct inter-operation of multiple subsystems. There is whole spectrum there, from testing integration between two modules, to testing integration with the production environment.","title":"Integration Tests"},{"location":"tests/#ui-tests-aka-functional-tests","text":"Testing scenarios on the product itself via browser, without taking into consideration the internal processes, to ensure expected behavior.","title":"UI Tests (A.K.A Functional Tests)"},{"location":"tests/#smoke-test-similar-to-sanity-check","text":"A simple integration test that checks that the system's critical functionality of the program is working fine. It's (also) used to save QA from wasting time on installing and testing software that is unstable. Smoke testing is an analogy with plumbing, where pipes are filled by smoke and then checked visually. If anything smokes, the system is leaky.","title":"Smoke Test (similar to Sanity Check)"},{"location":"tests/#regression-test-aka-non-regression-test","text":"A test that was written particularly for a bug fix and ensures that this bug will not happen again. It can also be a test made prior to changing an application to ensure the application has the same output.","title":"Regression Test (aka Non-Regression Test)"},{"location":"tests/#acceptance-test","text":"Ensures that a new feature is implemented correctly. Similar to an integration test, but focuses on the expected result rather than on the integration level of the components involved.","title":"Acceptance Test"},{"location":"tests/#system-test","text":"Tests a system in a black boxed environment. Dependencies on other systems are often mocked (otherwise it would be more of an integration test). It differs from Integration Test in the matter of it is testing on a complete, integrated system to evaluate the system\u2019s compliance with its specified requirements whether Integration testing is a testing in which individual software modules are combined and tested as a group.","title":"System Test"},{"location":"tests/#pre-flight-check","text":"Tests that are repeated in a production-like environment, to alleviate the 'works on my machine' issue. Often this is realized by doing an acceptance or smoke test in a production like environment.","title":"Pre-flight Check"},{"location":"tests/#end-to-end-test","text":"This is more about the actual flow through a system in a more realistic end user scenario. Can a user navigate the application as expected and does it work? You're testing the workflow (where System tests test the whole system)","title":"End-to-end Test"},{"location":"tests/#ab-test-aka-split-testing","text":"Randomly redirect a percentage of clients to another version of the application, gather data and generate statistics","title":"A/B Test (aka Split Testing)"},{"location":"tests/#process","text":"A development process example could be: Build passed? - Smoke Test passed? - Acceptance Test passed? - QA Tested? - Production","title":"Process"},{"location":"css/hacks/","text":"Tricks Target only 1 browser version . #element { color:pink \\0/IE9; // (only for IE9!) } Source Select all but the first p + p { background: cyan; } Source CSS Rules Priority .footer { .footer-item { background: red; } } .footer-item { background: green; } In the end the nested property prevails: background: red; Source View variable value span { $post: 'Vipers'; ::after { content: $post; } } Source","title":"Hacks"},{"location":"css/hacks/#tricks","text":"","title":"Tricks"},{"location":"css/hacks/#target-only-1-browser-version","text":"#element { color:pink \\0/IE9; // (only for IE9!) } Source","title":"Target only 1 browser version ."},{"location":"css/hacks/#select-all-but-the-first","text":"p + p { background: cyan; } Source","title":"Select all but the first"},{"location":"css/hacks/#css-rules-priority","text":".footer { .footer-item { background: red; } } .footer-item { background: green; } In the end the nested property prevails: background: red; Source","title":"CSS Rules Priority"},{"location":"css/hacks/#view-variable-value","text":"span { $post: 'Vipers'; ::after { content: $post; } } Source","title":"View variable value"},{"location":"css/line_height/","text":"","title":"Line Heigh"},{"location":"css/selectors/","text":"#container * { all children of container } li a { descendant: grab all a in li} .ico.ico-plus { grab items with both classes } li, a { grab both a and li} li a { grab only all direct children a} ul + p { adjacent: only first paragraph preceding ul } ul ~ p { all paragraphs preceding ul } a[title] { a with attribute title } a[href=\u201din.gr\u201d] { only a with href=in.gr } a[href*= any ] {value must appear somewhere in the attribute } a[href^= http ] {attribute must start with this value } a[href$= .jpg ] { attribute must end with this value }","title":"Selectors"},{"location":"notes/","text":"Notes A collection of helpful notes, simple solutions, hacks and things that I stumbled upon Set up MkDocs mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Deploy to GitHub Pages Automatically deploy build files to gh-pages branch: bash deploy.sh License MIT","title":"Notes"},{"location":"notes/#notes","text":"A collection of helpful notes, simple solutions, hacks and things that I stumbled upon","title":"Notes"},{"location":"notes/#set-up-mkdocs","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Set up MkDocs"},{"location":"notes/#deploy-to-github-pages","text":"Automatically deploy build files to gh-pages branch: bash deploy.sh","title":"Deploy to GitHub Pages"},{"location":"notes/#license","text":"MIT","title":"License"},{"location":"notes/apacheMac/","text":"Commands apachectl configtest # test configuration apachectl -t # test configuration sudo service apache2 reload # restart apache sudo apachectl restart # restart apache /etc/apache2/users/ # users config","title":"Apache"},{"location":"notes/apacheMac/#commands","text":"apachectl configtest # test configuration apachectl -t # test configuration sudo service apache2 reload # restart apache sudo apachectl restart # restart apache /etc/apache2/users/ # users config","title":"Commands"},{"location":"notes/docker/","text":"Autostart / Fail recovery Service # /etc/init/app.conf description calendar app author stavros liaskos start on (started docker) stop on runlevel [!2345] # Automatically Respawn with finite limits respawn respawn limit 99 15 respawn limit unlimited script docker run -d -p 9090:80 --name calendar_app -v /home/developer/calendar_app/html:/app/ k0st/alpine-apache-php end script Commands init-checkconf app.conf # validate conf file sudo service app restart # activate upstart service Commit, export and load image docker commit -m updated pes -a Stavros Liaskos ee4g8s6c95c1 update/pes:v1 docker images docker save -o ./pes_v1.tar update/pes Dockerfile example # adding nano to tiny alpine container FROM k0st/alpine-apache-php # /home/developer MAINTAINER Stavros Liaskos # comments are allowed ONLY in the start of the line! RUN apk --update add nano ENV TERM=xterm Build image # build image (note trailing '.') docker build -t apache/php:nano . # use that image docker run -d -p 9090:80 --name calendar_app -v /home/developer/calendar_app/html:/app/ apache/php:nano # ssh to the container docker exec -it calendar_app /bin/sh Commands docker build -t calendar_app . #builds image. the . in the end points to the current directory docker run -d -p 9090:80 --name calendar_app -v $PWD /html:/var/www/html/ php:7.0-apache docker run -d -p 9090:80 --name calendar_app -v $PWD /html:/app/ k0st/alpine-apache-php docker exec -ti -u root container_name bash # run the container as root! docker inspect containerName Links Update error solution Dockerfiles explained","title":"Docker"},{"location":"notes/docker/#autostart-fail-recovery-service","text":"# /etc/init/app.conf description calendar app author stavros liaskos start on (started docker) stop on runlevel [!2345] # Automatically Respawn with finite limits respawn respawn limit 99 15 respawn limit unlimited script docker run -d -p 9090:80 --name calendar_app -v /home/developer/calendar_app/html:/app/ k0st/alpine-apache-php end script","title":"Autostart / Fail recovery Service"},{"location":"notes/docker/#commands","text":"init-checkconf app.conf # validate conf file sudo service app restart # activate upstart service","title":"Commands"},{"location":"notes/docker/#commit-export-and-load-image","text":"docker commit -m updated pes -a Stavros Liaskos ee4g8s6c95c1 update/pes:v1 docker images docker save -o ./pes_v1.tar update/pes","title":"Commit, export and load image"},{"location":"notes/docker/#dockerfile-example","text":"# adding nano to tiny alpine container FROM k0st/alpine-apache-php # /home/developer MAINTAINER Stavros Liaskos # comments are allowed ONLY in the start of the line! RUN apk --update add nano ENV TERM=xterm","title":"Dockerfile example"},{"location":"notes/docker/#build-image","text":"# build image (note trailing '.') docker build -t apache/php:nano . # use that image docker run -d -p 9090:80 --name calendar_app -v /home/developer/calendar_app/html:/app/ apache/php:nano # ssh to the container docker exec -it calendar_app /bin/sh","title":"Build image"},{"location":"notes/docker/#commands_1","text":"docker build -t calendar_app . #builds image. the . in the end points to the current directory docker run -d -p 9090:80 --name calendar_app -v $PWD /html:/var/www/html/ php:7.0-apache docker run -d -p 9090:80 --name calendar_app -v $PWD /html:/app/ k0st/alpine-apache-php docker exec -ti -u root container_name bash # run the container as root! docker inspect containerName","title":"Commands"},{"location":"notes/docker/#links","text":"Update error solution Dockerfiles explained","title":"Links"},{"location":"notes/fail2ban/","text":"sudo service fail2ban restart # to apply changes sudo fail2ban-client status # list jails sudo iptables -S # list configured firewall rules sudo fail2ban-client status ssh # status for particular jail","title":"Fail2Ban"},{"location":"notes/ffmpeg/","text":"Convert/compress all videos in mp4 and webm format #!/bin/bash mkdir output for i in *.mov; do name=`echo $i | cut -d'.' -f1`; echo $name; ffmpeg -i $i -vcodec libvpx -qmin 0 -qmax 50 -crf 20 -b:v 1M -acodec libvorbis ./output/$name.webm ; done for i in *.mov; do name=`echo $i | cut -d'.' -f1`; echo $name; ffmpeg -i $i -vcodec h264 -acodec aac -strict -2 -crf 28 ./output/$name.mp4 ; done # mv output/* ./ # rm -rf *.m4v .mov output VP9 ffmpeg -i video.mov -vf scale=-1:720 -c:v libvpx-vp9 -pass 2 -pix_fmt yuv420p -b:v 0 -crf 15 -threads 2 -speed 2 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libopus -b:a 320k -f webm video_vp9_scale=1:720.webm video_vp9_scale=1:720.webm ffmpeg -i video.mov -vf scale=720:-1 -c:v libvpx-vp9 -pass 2 -pix_fmt yuv420p -b:v 0 -crf 15 -threads 2 -speed 2 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libopus -b:a 320k -f webm video_vp9_scale=720:-1.webm video_vp9_scale=720:-1.webm VP8 WEBM ffmpeg -i video.mov -vcodec libvpx -qmin 0 -qmax 50 -crf 20 -b:v 1M -acodec libvorbis video-crf20-b:v1M.webm MP4 ffmpeg -i video.mov -vcodec h264 -acodec aac -strict -2 -crf 28 video-crf28.mp4 COMPAT MODE MP4 ffmpeg -an -i video.mov -vcodec libx264 -pix_fmt yuv420p -crf 28 -profile:v baseline -level 3 video-28compat.mp4","title":"Ffmpeg"},{"location":"notes/ffmpeg/#convertcompress-all-videos-in-mp4-and-webm-format","text":"#!/bin/bash mkdir output for i in *.mov; do name=`echo $i | cut -d'.' -f1`; echo $name; ffmpeg -i $i -vcodec libvpx -qmin 0 -qmax 50 -crf 20 -b:v 1M -acodec libvorbis ./output/$name.webm ; done for i in *.mov; do name=`echo $i | cut -d'.' -f1`; echo $name; ffmpeg -i $i -vcodec h264 -acodec aac -strict -2 -crf 28 ./output/$name.mp4 ; done # mv output/* ./ # rm -rf *.m4v .mov output VP9 ffmpeg -i video.mov -vf scale=-1:720 -c:v libvpx-vp9 -pass 2 -pix_fmt yuv420p -b:v 0 -crf 15 -threads 2 -speed 2 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libopus -b:a 320k -f webm video_vp9_scale=1:720.webm video_vp9_scale=1:720.webm ffmpeg -i video.mov -vf scale=720:-1 -c:v libvpx-vp9 -pass 2 -pix_fmt yuv420p -b:v 0 -crf 15 -threads 2 -speed 2 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libopus -b:a 320k -f webm video_vp9_scale=720:-1.webm video_vp9_scale=720:-1.webm VP8 WEBM ffmpeg -i video.mov -vcodec libvpx -qmin 0 -qmax 50 -crf 20 -b:v 1M -acodec libvorbis video-crf20-b:v1M.webm MP4 ffmpeg -i video.mov -vcodec h264 -acodec aac -strict -2 -crf 28 video-crf28.mp4 COMPAT MODE MP4 ffmpeg -an -i video.mov -vcodec libx264 -pix_fmt yuv420p -crf 28 -profile:v baseline -level 3 video-28compat.mp4","title":"Convert/compress all videos in mp4 and webm format"},{"location":"notes/hosts/","text":"Simulate visits from specific urls I want to simulate visits from specific urls, so I can disable auth for that specific urls production vm: 192.168.33.11 proxy vm: 192.168.33.50 add this in my hosts file: ## simulation of TEST Server Link Placement 192.168.33.50 staging.example.com ## production url simulation 192.168.33.11 www.example.com add this in \"production vm\" .htaccess file SetEnvIfNoCase Referer ^(http://staging.example.com|http://www.example.com/|) noauth=1 AuthType Basic AuthName prod preview AuthUserFile /var/www/.htpasswd Require valid-user Require env noauth","title":"Hosts"},{"location":"notes/hosts/#simulate-visits-from-specific-urls","text":"I want to simulate visits from specific urls, so I can disable auth for that specific urls production vm: 192.168.33.11 proxy vm: 192.168.33.50 add this in my hosts file: ## simulation of TEST Server Link Placement 192.168.33.50 staging.example.com ## production url simulation 192.168.33.11 www.example.com add this in \"production vm\" .htaccess file SetEnvIfNoCase Referer ^(http://staging.example.com|http://www.example.com/|) noauth=1 AuthType Basic AuthName prod preview AuthUserFile /var/www/.htpasswd Require valid-user Require env noauth","title":"Simulate visits from specific urls"},{"location":"notes/imageMagick/","text":"mogrify -format jpg *.png # converts all PNGs to JPGs (and deletes the PNGs!!)","title":"ImageMagick"},{"location":"notes/ldap/","text":"Generate token from gitlab page curl --header \"PRIVATE-TOKEN: CFe77gasf97aVqhiByus\" https://example-gitlab.de/api/v4/users/","title":"LDAP"},{"location":"notes/ldap/#generate-token-from-gitlab-page","text":"curl --header \"PRIVATE-TOKEN: CFe77gasf97aVqhiByus\" https://example-gitlab.de/api/v4/users/","title":"Generate token from gitlab page"},{"location":"notes/mysql/","text":"Developer Experience problems Access denied Access denied for user Sequel pro - Database - User Accounts - choose account (root) - check all privilages","title":"MySQL"},{"location":"notes/mysql/#developer-experience-problems","text":"Access denied Access denied for user Sequel pro - Database - User Accounts - choose account (root) - check all privilages","title":"Developer Experience problems"},{"location":"notes/symfony_demo_app/","text":"Symfony Contents 1. Directories 2. Links 3. Files 4. Commands 5. Database 6. Generate entities from existing DB 7. Generate admin class from existing entity 8. Hide id field from forms 9. Sonata admin functions 10. Configure generated entities 11. Styling forms 12. Foreign keys 13. Translations 14. Generate dynamic select boxes 15. Parent-Child Entity Form Handling 20. Error handling 21. Php.ini 1. Directories /vendor # libraries (composer downloads here outside libraries) /app # configuration /bin # holds executable files that composer added /src # bundles are here /web # document root (public documents i.e. css and js) Symfony 3.1.4 was successfully installed. Now you can: * Configure your application in app/config/parameters.yml file. * Run your application: 1. Execute the php bin/console server:run command. 2. Browse to the http://localhost:8000 URL. * Read the documentation at http://symfony.com/doc 2. Links http://localhost:8000/config.php Configurations Checker http://localhost:8000/app_dev.php Developement Enviroment http://localhost:8000/app.php Application http://localhost:8000/admin/dashboard admin interface 3. Files /private/etc/php.ini THE php.ini /app/AppKernel.php register bundles /app/config/config.yml configure bundles /app/config/routing.yml urls of the app /app/config/services.yml urls of the app /app/config/parameters.yml database access 4. Commands php bin/console cache:clear # clear cache php bin/console server:run # start php server php bin/symfony_requirements # check requirements php bin/console debug:router # lists all routes php bin/console # lists all available commands composer update # updates and installes/unistalles according to composer.json | also generates the parameters.yml from parameters.yml.dist php bin/console assets:install # make a hard copy of the assets in web/ php bin/console doctrine:schema:update --dump-sql # view but NOT execute the sql command php bin/console doctrine:schema:update --force # executer the command above php bin/console doctrine:generate:entities AppBundle # generate setters and getters i.e. /src/AppBundle/Entity/Car.php php app/console sonata:admin:generate AppBundle/Entity/Car # generated admin class from existing entity php bin/console assets:install --symlink # if possible, make absolute symlinks in web/ if not, make a hard copy php bin/console doctrine:schema:validate # validate schema 5. Database In order to connect to the database, a new user has to be added and granded all privilages. In Sequel Pro: Database- User Accounts..- Select root- Add host- %(is like a wildcard)- check all privilages and add the user 6. Generate entities from existing DB Ask Doctrine to introspect the database and generate the corresponding metadata files php bin/console doctrine:mapping:import --force AcmeBlogBundle xml Ask Doctrine to build related entity classes by executing the following two commands. First command is not necessery if the class is already created php bin/console doctrine:generate:entities AppBundle http://symfony.com/doc/current/doctrine/reverse_engineering.html 7. Generate admin class from existing entity Run the folloing command and use exactly the same name as the entity in the end php bin/console sonata:admin:generate AppBundle/Entity/Car Add entry at /app/config/services.yml services: //here more services admin.car: class: AppBundle\\Admin\\CarAdmin arguments: [~, AppBundle\\Entity\\Car, ~] tags: - { name: sonata.admin, manager_type: orm, label: Car } 8. Hide id field from forms Id's with autoincrement should not be visible and configurable about the user. Delete the entries for id's in: /src/AppBundle/Admin/SomethingAdmin.php at: protected function configureFormFields(FormMapper $formMapper) 9. Sonata admin functions configureDatagridFilters #called when we use filters configureListFields #called when listing items configureFormFields #called when editing items configureShowFields #called when showing items 10. Configure generated entities Generated entities are automatically configured from AppBundle/Resources/config/doctrine directory. In order to configure them ourselves, we need to delete this directory and then add the following in EVERY entity: ```php // at the top of the file use Doctrine\\ORM\\Mapping as ORM; // on top of every entity class /* * Image * @ORM\\Table(name=\"image\") * @ORM\\Entity / // on top of every varialbe declared / * @var string * @ORM\\Column(name=\"trans_path\", type=\"string\", length=64, nullable=true) */ ``` 11. Styling forms a. Creating tabs To separate form fields in different tabs, just configure function configureFormFields in the admin class. For example, the following will create 2 tabs (General / Video Copies): php $formMapper - tab(\"General\") - add('optionId') - end() - end() - tab(\"Video Copies\") - add('videoCopies', 'sonata_type_collection', array( 'by_reference' = false ), array( 'edit' = 'inline', 'inline' = 'table' ) ) - end() ; 12. Foreign keys In order to implement the sql foreign keys functionality, these steps are needed in the Entities. For example Alpha.id has OneToMany with Beta.alhpa_ID. In Alpha.php: php /** * @ORM\\OneToMany(targetEntity=\"Beta\", mappedBy=\"alhpa_ID\", cascade={\"persist\"}, orphanRemoval=true) * */ private $betas; In Alpha.php php public function __construct() { $this- betas = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } In Alpha.php //where lightOptions = betas (too long to change) ```php public function setLightOptions($lightOptions) { if (count($lightOptions) 0) { foreach ($lightOptions as $i) { $this- addLightOption($i); } } return $this; } public function addLightOption(LightOption $lightOption) { $lightOption- setCarId($this); $this- lightOptions- add($lightOption); } public function removeLightOption(LightOption $lightOption) { $this- lightOptions- removeElement($lightOption); } public function getLightOptions() { return $this- lightOptions; } In Beta.php php / @var integer @ORM\\ManyToOne(targetEntity=\"Alpha\", inversedBy=\"betas\", cascade={\"detach\"}) @ORM\\JoinColumn(name=\"beta_ID\", referencedColumnName=\"id\") */ private $beta_ID; ``` 13. Translations Find out how to add the translations bundle. This manual expects that translation bundle is already installed. If you have labels in config.yml that are previewed in the Dashboard i.e : sonata_admin: dashboard: blocks: - position: left type: sonata.admin.block.admin_list settings: groups: [demoapp.admin.group.car] groups: demoapp.admin.group.car: label: demoapp.admin.group.car icon: ' i class= fa fa-car /i ' items: [admin.car, admin.video, admin.demooption, admin.feature, admin.image] in order to translate these labels you need to configure first the services.yml like that: admin.car: class: AppBundle\\Admin\\CarAdmin arguments: [~, AppBundle\\Entity\\Car, ~] tags: - { name: sonata.admin, manager_type: orm, label: demoapp.admin.car } # do the same for admin.video, admin.demooption, admin.feature, admin.image of course then add these 2 files for each language you want to support: messages.de.yml demoapp.admin.car: Fahrzeuge demoapp.admin.video: Videos # etc etc-- and SonataAdminBundle.de.yml demoapp.admin.group.car: Fahrzeuge 14. Generate dynamic select boxes Let's take a live example from demo app. There are three tables like that: Cars (OneToMany) LightOptions (OneToMany) Features. When the user wants to add a new feature, it should be relative to a light option and a car. So, a acceptable configuration would be to have a select box for the Car and then a dynamicly generated select box for ONLY the AVAILABLE LightOptions of that car! HTF are we gonna do it..? install FOSjRoutingBundle, register, enable etc etc.. copy this: vendor/sonata-project/admin-bundle/Resources/views/CRUD/base_edit.html.twig to: src/AppBundle/Resources/views/Feature/base_edit.html.twig add the following lines to the new above file script src= {{ asset('bundles/fosjsrouting/js/router.js') }} /script configure services.yml for feature to: admin.feature: class: AppBundle\\Admin\\FeatureAdmin arguments: [~, AppBundle\\Entity\\Feature, AppBundle:FeatureAdmin] tags: - { name: sonata.admin, manager_type: orm, label: lightapp.admin.feature } add $cars to Feature.php (and setters getters..): /** * @var string * */ private $cars; in configureFormFields in FeatureAdmin.php change lightoptionId to : - add('lightoptionId', EntityType::class, array( 'class' = 'AppBundle:Lightoption', 'query_builder' = function (EntityRepository $er) { return $er- createQueryBuilder('u') - orderBy('u.optionId', 'ASC'); }, 'choice_label' = 'optionId', )) AND also add this function and this 2 lines on top: use Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType; use Doctrine\\ORM\\EntityRepository; // in your admin class public function getTemplate($name) { switch ($name) { case 'edit': return 'AppBundle:Feature:base_edit.html.twig'; break; default: return parent::getTemplate($name); break; } } create src/AppBundle/Controller/FeatureAdminController.php: namespace AppBundle\\Controller; use Sonata\\AdminBundle\\Controller\\CRUDController as Controller; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; use GD\\AdminBundle\\Entity\\Merchant; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route; class FeatureAdminController extends Controller { public function getLightOptionsFromCarAction($carId) { $html = ; $option = $this- getDoctrine() - getRepository('AppBundle:Lightoption') - findByCarId($carId); foreach($option as $cat){ $html .= ' option value= '.$cat- getId().' '.$cat- getOptionId().' /option '; } return new Response($html, 200); } } Links http://symfony.com/doc/master/bundles/FOSJsRoutingBundle/index.html http://stackoverflow.com/questions/10118868/how-to-use-ajax-within-sonata-admin-forms http://symfony.com/doc/current/reference/forms/types/entity.html#query-builder http://stackoverflow.com/questions/9052916/how-to-use-select-box-related-on-another-select-box 15. Parent-Child Entity Form Handling Given Translation Entity and Copy Entity (translation|\"parent\" , copy|\"child\") with OneToMany between them. We want to have on parent's create form a btn \"add new\" for the copies. The subform should NOT contain the field translation_ID . It should be set automatically. One the other hand, when we add a new Copy, then there should be a select box with all the available translations and choose from them. Add/Conf in Translation.php: /** * @ORM\\OneToMany(targetEntity= Copy , mappedBy= translationId , cascade={ persist }, orphanRemoval=true) * */ private $copies; //add setters,getters and construct for $copies public function __toString() { return (string) $this- getOptionId(); } Edit formMapper of CopyAdmin.php: //more adds.. if ($this- getRequest()- get('code') !== 'admin.translation') { $em = $this- modelManager- getEntityManager('AppBundle\\Entity\\Translation'); $query = $em- createQueryBuilder('c') - select('c') - from('AppBundle:Translation', 'c'); $formMapper- add('translationId', 'sonata_type_model', array( 'required' = true, 'query' = $query, 'btn_add' = false )); } $formMapper- end(); Edit formMapper of TranslationAdmin.php: - add('copies', 'sonata_type_collection', array( 'by_reference' = false ), array( 'edit' = 'inline', 'inline' = 'table' ) ) 20. Error handling when running php bin/console doctrine:schema:validate and the error is [Database] FAIL - The database schema is not in sync with the current mapping file. . We have to export the db, empty the tables, run php bin/console doctrine:schema:update --dump-sql and then php bin/console doctrine:schema:update -f and in the end import the previous dumped db. Populate Database. When trunctate or instert is needed, the FK should be disabled in order for them to work. First run SET FOREIGN_KEY_CHECKS = 0; then do the changes and then run SET FOREIGN_KEY_CHECKS = 0; 21. Php.ini restart php server for changes to have effect!!!","title":"Symfony Demo"},{"location":"notes/symfony_demo_app/#symfony","text":"","title":"Symfony"},{"location":"notes/symfony_demo_app/#contents","text":"1. Directories 2. Links 3. Files 4. Commands 5. Database 6. Generate entities from existing DB 7. Generate admin class from existing entity 8. Hide id field from forms 9. Sonata admin functions 10. Configure generated entities 11. Styling forms 12. Foreign keys 13. Translations 14. Generate dynamic select boxes 15. Parent-Child Entity Form Handling 20. Error handling 21. Php.ini","title":"Contents"},{"location":"notes/symfony_demo_app/#1-directories","text":"/vendor # libraries (composer downloads here outside libraries) /app # configuration /bin # holds executable files that composer added /src # bundles are here /web # document root (public documents i.e. css and js) Symfony 3.1.4 was successfully installed. Now you can: * Configure your application in app/config/parameters.yml file. * Run your application: 1. Execute the php bin/console server:run command. 2. Browse to the http://localhost:8000 URL. * Read the documentation at http://symfony.com/doc","title":"1. Directories"},{"location":"notes/symfony_demo_app/#2-links","text":"http://localhost:8000/config.php Configurations Checker http://localhost:8000/app_dev.php Developement Enviroment http://localhost:8000/app.php Application http://localhost:8000/admin/dashboard admin interface","title":"2. Links"},{"location":"notes/symfony_demo_app/#3-files","text":"/private/etc/php.ini THE php.ini /app/AppKernel.php register bundles /app/config/config.yml configure bundles /app/config/routing.yml urls of the app /app/config/services.yml urls of the app /app/config/parameters.yml database access","title":"3. Files"},{"location":"notes/symfony_demo_app/#4-commands","text":"php bin/console cache:clear # clear cache php bin/console server:run # start php server php bin/symfony_requirements # check requirements php bin/console debug:router # lists all routes php bin/console # lists all available commands composer update # updates and installes/unistalles according to composer.json | also generates the parameters.yml from parameters.yml.dist php bin/console assets:install # make a hard copy of the assets in web/ php bin/console doctrine:schema:update --dump-sql # view but NOT execute the sql command php bin/console doctrine:schema:update --force # executer the command above php bin/console doctrine:generate:entities AppBundle # generate setters and getters i.e. /src/AppBundle/Entity/Car.php php app/console sonata:admin:generate AppBundle/Entity/Car # generated admin class from existing entity php bin/console assets:install --symlink # if possible, make absolute symlinks in web/ if not, make a hard copy php bin/console doctrine:schema:validate # validate schema","title":"4. Commands"},{"location":"notes/symfony_demo_app/#5-database","text":"In order to connect to the database, a new user has to be added and granded all privilages. In Sequel Pro: Database- User Accounts..- Select root- Add host- %(is like a wildcard)- check all privilages and add the user","title":"5. Database"},{"location":"notes/symfony_demo_app/#6-generate-entities-from-existing-db","text":"Ask Doctrine to introspect the database and generate the corresponding metadata files php bin/console doctrine:mapping:import --force AcmeBlogBundle xml Ask Doctrine to build related entity classes by executing the following two commands. First command is not necessery if the class is already created php bin/console doctrine:generate:entities AppBundle http://symfony.com/doc/current/doctrine/reverse_engineering.html","title":"6. Generate entities from existing DB"},{"location":"notes/symfony_demo_app/#7-generate-admin-class-from-existing-entity","text":"Run the folloing command and use exactly the same name as the entity in the end php bin/console sonata:admin:generate AppBundle/Entity/Car Add entry at /app/config/services.yml services: //here more services admin.car: class: AppBundle\\Admin\\CarAdmin arguments: [~, AppBundle\\Entity\\Car, ~] tags: - { name: sonata.admin, manager_type: orm, label: Car }","title":"7. Generate admin class from existing entity"},{"location":"notes/symfony_demo_app/#8-hide-id-field-from-forms","text":"Id's with autoincrement should not be visible and configurable about the user. Delete the entries for id's in: /src/AppBundle/Admin/SomethingAdmin.php at: protected function configureFormFields(FormMapper $formMapper)","title":"8. Hide id field from forms"},{"location":"notes/symfony_demo_app/#9-sonata-admin-functions","text":"configureDatagridFilters #called when we use filters configureListFields #called when listing items configureFormFields #called when editing items configureShowFields #called when showing items","title":"9. Sonata admin functions"},{"location":"notes/symfony_demo_app/#10-configure-generated-entities","text":"Generated entities are automatically configured from AppBundle/Resources/config/doctrine directory. In order to configure them ourselves, we need to delete this directory and then add the following in EVERY entity: ```php // at the top of the file use Doctrine\\ORM\\Mapping as ORM; // on top of every entity class /* * Image * @ORM\\Table(name=\"image\") * @ORM\\Entity / // on top of every varialbe declared / * @var string * @ORM\\Column(name=\"trans_path\", type=\"string\", length=64, nullable=true) */ ```","title":"10. Configure generated entities"},{"location":"notes/symfony_demo_app/#11-styling-forms","text":"","title":"11. Styling forms"},{"location":"notes/symfony_demo_app/#a-creating-tabs","text":"To separate form fields in different tabs, just configure function configureFormFields in the admin class. For example, the following will create 2 tabs (General / Video Copies): php $formMapper - tab(\"General\") - add('optionId') - end() - end() - tab(\"Video Copies\") - add('videoCopies', 'sonata_type_collection', array( 'by_reference' = false ), array( 'edit' = 'inline', 'inline' = 'table' ) ) - end() ;","title":"a. Creating tabs"},{"location":"notes/symfony_demo_app/#12-foreign-keys","text":"In order to implement the sql foreign keys functionality, these steps are needed in the Entities. For example Alpha.id has OneToMany with Beta.alhpa_ID. In Alpha.php: php /** * @ORM\\OneToMany(targetEntity=\"Beta\", mappedBy=\"alhpa_ID\", cascade={\"persist\"}, orphanRemoval=true) * */ private $betas; In Alpha.php php public function __construct() { $this- betas = new \\Doctrine\\Common\\Collections\\ArrayCollection(); } In Alpha.php //where lightOptions = betas (too long to change) ```php public function setLightOptions($lightOptions) { if (count($lightOptions) 0) { foreach ($lightOptions as $i) { $this- addLightOption($i); } } return $this; } public function addLightOption(LightOption $lightOption) { $lightOption- setCarId($this); $this- lightOptions- add($lightOption); } public function removeLightOption(LightOption $lightOption) { $this- lightOptions- removeElement($lightOption); } public function getLightOptions() { return $this- lightOptions; } In Beta.php php / @var integer @ORM\\ManyToOne(targetEntity=\"Alpha\", inversedBy=\"betas\", cascade={\"detach\"}) @ORM\\JoinColumn(name=\"beta_ID\", referencedColumnName=\"id\") */ private $beta_ID; ```","title":"12. Foreign keys"},{"location":"notes/symfony_demo_app/#13-translations","text":"Find out how to add the translations bundle. This manual expects that translation bundle is already installed. If you have labels in config.yml that are previewed in the Dashboard i.e : sonata_admin: dashboard: blocks: - position: left type: sonata.admin.block.admin_list settings: groups: [demoapp.admin.group.car] groups: demoapp.admin.group.car: label: demoapp.admin.group.car icon: ' i class= fa fa-car /i ' items: [admin.car, admin.video, admin.demooption, admin.feature, admin.image] in order to translate these labels you need to configure first the services.yml like that: admin.car: class: AppBundle\\Admin\\CarAdmin arguments: [~, AppBundle\\Entity\\Car, ~] tags: - { name: sonata.admin, manager_type: orm, label: demoapp.admin.car } # do the same for admin.video, admin.demooption, admin.feature, admin.image of course then add these 2 files for each language you want to support: messages.de.yml demoapp.admin.car: Fahrzeuge demoapp.admin.video: Videos # etc etc-- and SonataAdminBundle.de.yml demoapp.admin.group.car: Fahrzeuge","title":"13. Translations"},{"location":"notes/symfony_demo_app/#14-generate-dynamic-select-boxes","text":"Let's take a live example from demo app. There are three tables like that: Cars (OneToMany) LightOptions (OneToMany) Features. When the user wants to add a new feature, it should be relative to a light option and a car. So, a acceptable configuration would be to have a select box for the Car and then a dynamicly generated select box for ONLY the AVAILABLE LightOptions of that car! HTF are we gonna do it..? install FOSjRoutingBundle, register, enable etc etc.. copy this: vendor/sonata-project/admin-bundle/Resources/views/CRUD/base_edit.html.twig to: src/AppBundle/Resources/views/Feature/base_edit.html.twig add the following lines to the new above file script src= {{ asset('bundles/fosjsrouting/js/router.js') }} /script configure services.yml for feature to: admin.feature: class: AppBundle\\Admin\\FeatureAdmin arguments: [~, AppBundle\\Entity\\Feature, AppBundle:FeatureAdmin] tags: - { name: sonata.admin, manager_type: orm, label: lightapp.admin.feature } add $cars to Feature.php (and setters getters..): /** * @var string * */ private $cars; in configureFormFields in FeatureAdmin.php change lightoptionId to : - add('lightoptionId', EntityType::class, array( 'class' = 'AppBundle:Lightoption', 'query_builder' = function (EntityRepository $er) { return $er- createQueryBuilder('u') - orderBy('u.optionId', 'ASC'); }, 'choice_label' = 'optionId', )) AND also add this function and this 2 lines on top: use Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType; use Doctrine\\ORM\\EntityRepository; // in your admin class public function getTemplate($name) { switch ($name) { case 'edit': return 'AppBundle:Feature:base_edit.html.twig'; break; default: return parent::getTemplate($name); break; } } create src/AppBundle/Controller/FeatureAdminController.php: namespace AppBundle\\Controller; use Sonata\\AdminBundle\\Controller\\CRUDController as Controller; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; use GD\\AdminBundle\\Entity\\Merchant; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route; class FeatureAdminController extends Controller { public function getLightOptionsFromCarAction($carId) { $html = ; $option = $this- getDoctrine() - getRepository('AppBundle:Lightoption') - findByCarId($carId); foreach($option as $cat){ $html .= ' option value= '.$cat- getId().' '.$cat- getOptionId().' /option '; } return new Response($html, 200); } }","title":"14. Generate dynamic select boxes"},{"location":"notes/symfony_demo_app/#links","text":"http://symfony.com/doc/master/bundles/FOSJsRoutingBundle/index.html http://stackoverflow.com/questions/10118868/how-to-use-ajax-within-sonata-admin-forms http://symfony.com/doc/current/reference/forms/types/entity.html#query-builder http://stackoverflow.com/questions/9052916/how-to-use-select-box-related-on-another-select-box","title":"Links"},{"location":"notes/symfony_demo_app/#15-parent-child-entity-form-handling","text":"Given Translation Entity and Copy Entity (translation|\"parent\" , copy|\"child\") with OneToMany between them. We want to have on parent's create form a btn \"add new\" for the copies. The subform should NOT contain the field translation_ID . It should be set automatically. One the other hand, when we add a new Copy, then there should be a select box with all the available translations and choose from them. Add/Conf in Translation.php: /** * @ORM\\OneToMany(targetEntity= Copy , mappedBy= translationId , cascade={ persist }, orphanRemoval=true) * */ private $copies; //add setters,getters and construct for $copies public function __toString() { return (string) $this- getOptionId(); } Edit formMapper of CopyAdmin.php: //more adds.. if ($this- getRequest()- get('code') !== 'admin.translation') { $em = $this- modelManager- getEntityManager('AppBundle\\Entity\\Translation'); $query = $em- createQueryBuilder('c') - select('c') - from('AppBundle:Translation', 'c'); $formMapper- add('translationId', 'sonata_type_model', array( 'required' = true, 'query' = $query, 'btn_add' = false )); } $formMapper- end(); Edit formMapper of TranslationAdmin.php: - add('copies', 'sonata_type_collection', array( 'by_reference' = false ), array( 'edit' = 'inline', 'inline' = 'table' ) )","title":"15. Parent-Child Entity Form Handling"},{"location":"notes/symfony_demo_app/#20-error-handling","text":"when running php bin/console doctrine:schema:validate and the error is [Database] FAIL - The database schema is not in sync with the current mapping file. . We have to export the db, empty the tables, run php bin/console doctrine:schema:update --dump-sql and then php bin/console doctrine:schema:update -f and in the end import the previous dumped db. Populate Database. When trunctate or instert is needed, the FK should be disabled in order for them to work. First run SET FOREIGN_KEY_CHECKS = 0; then do the changes and then run SET FOREIGN_KEY_CHECKS = 0;","title":"20. Error handling"},{"location":"notes/symfony_demo_app/#21-phpini","text":"restart php server for changes to have effect!!!","title":"21. Php.ini"},{"location":"notes/vagrant/","text":"Locale fix locale error: #locale # show locale vars sudo locale-gen en_US.UTF-8 export LANGUAGE=en_US.UTF-8 export LC_ALL=en_US.UTF-8 sudo dpkg-reconfigure locales","title":"Vagrant"},{"location":"notes/vagrant/#locale","text":"fix locale error: #locale # show locale vars sudo locale-gen en_US.UTF-8 export LANGUAGE=en_US.UTF-8 export LC_ALL=en_US.UTF-8 sudo dpkg-reconfigure locales","title":"Locale"}]}